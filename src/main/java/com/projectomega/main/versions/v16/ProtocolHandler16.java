package com.projectomega.main.versions.v16;

import com.projectomega.main.game.Material;
import com.projectomega.main.game.block.BlockDataTag;
import com.projectomega.main.game.entity.EntityType;
import com.projectomega.main.packets.PacketType;
import com.projectomega.main.versions.ProtocolHandler;

public class ProtocolHandler16 extends ProtocolHandler {


    public ProtocolHandler16() {
        packetIDs.put(PacketType.KEEP_ALIVE_SERVERBOUND, 0x10);
        packetIDs.put(PacketType.HELD_ITEM_CHANGE_SERVERBOUND, 0x25);
        packetIDs.put(PacketType.HELD_ITEM_CHANGE, 0x3F);
        packetIDs.put(PacketType.CLIENT_STATUS, 0x04);
        packetIDs.put(PacketType.BLOCK_CHANGE, 0x08);
        packetIDs.put(PacketType.CLICK_WINDOW, 0x09);
        packetIDs.put(PacketType.CLIENT_SETTINGS, 0x05);
        packetIDs.put(PacketType.CHAT_SERVERBOUND, 0x03);
        packetIDs.put(PacketType.HANDSHAKE_PING, 1);
        packetIDs.put(PacketType.BOSS_BAR, 0x0C);
        packetIDs.put(PacketType.CHAT_CLIENTBOUND, 0x0E);
        packetIDs.put(PacketType.CHUNK_DATA, 0x20);
        packetIDs.put(PacketType.CLICK_WINDOW_BUTTON, 0x08);
        packetIDs.put(PacketType.ENTITY_METADATA, 0x44);
        packetIDs.put(PacketType.ENTITY_TELEPORT, 0x56);
        packetIDs.put(PacketType.HANDSHAKE_PONG, 1);
        packetIDs.put(PacketType.JOIN_GAME, 0x24);
        packetIDs.put(PacketType.KEEP_ALIVE_CLIENTBOUND, 0x1F);
        packetIDs.put(PacketType.LOGIN_SUCCESS, 2);
        packetIDs.put(PacketType.OPEN_WINDOW, 0x2D);
        packetIDs.put(PacketType.PLAYER_INFO, 0x32);
        packetIDs.put(PacketType.PLAYER_POSITION_AND_LOOK, 0x34);
        packetIDs.put(PacketType.RESPAWN, 0x39);
        packetIDs.put(PacketType.SET_EXPERIENCE, 0x48);
        packetIDs.put(PacketType.SOUND_EFFECT, 0x51);
        packetIDs.put(PacketType.SPAWN_ENTITY, 0x00);
        packetIDs.put(PacketType.SET_SLOT, 0x15);
        packetIDs.put(PacketType.SPAWN_LIVING_ENTITY, 0x02);
        packetIDs.put(PacketType.STATUS_PING, 0);
        packetIDs.put(PacketType.TIME_UPDATE, 0x4E);
        packetIDs.put(PacketType.TITLE, 0x4F);
        packetIDs.put(PacketType.UPDATE_HEALTH, 0x49);
        packetIDs.put(PacketType.WINDOW_ITEMS, 0x13);
        packetIDs.put(PacketType.PLAYER_POSITION, 0x12);
        packetIDs.put(PacketType.PLAYER_POSITION_AND_ROTATION, 0x13);
        packetIDs.put(PacketType.MULTI_BLOCK_CHANGE, 0x3B);
        packetIDs.put(PacketType.UPDATE_VIEW_POSITION, 0x40);
        packetIDs.put(PacketType.UPDATE_VIEW_DISTANCE, 0x41);

        entityIDs.put(EntityType.AREA_EFFECT_CLOUD, 0);
        entityIDs.put(EntityType.ARMOR_STAND, 1);
        entityIDs.put(EntityType.ARROW, 2);
        entityIDs.put(EntityType.BAT, 3);
        entityIDs.put(EntityType.BEE, 4);
        entityIDs.put(EntityType.BLAZE, 5);
        entityIDs.put(EntityType.BOAT, 6);
        entityIDs.put(EntityType.CAT, 7);
        entityIDs.put(EntityType.CAVESPIDER, 8);
        entityIDs.put(EntityType.CHICKEN, 9);
        entityIDs.put(EntityType.COD, 10);
        entityIDs.put(EntityType.COW, 11);
        entityIDs.put(EntityType.CREEPER, 12);
        entityIDs.put(EntityType.DONKEY, 13);
        entityIDs.put(EntityType.DOLPHIN, 14);
        entityIDs.put(EntityType.DRAGON_FIREBALL, 15);
        entityIDs.put(EntityType.DROWNED, 16);
        entityIDs.put(EntityType.ELDER_GUADIAN, 17);
        entityIDs.put(EntityType.ENDER_CRYSTAL, 18);
        entityIDs.put(EntityType.ENDER_DRAGON, 19);
        entityIDs.put(EntityType.ENDERMAN, 20);
        entityIDs.put(EntityType.ENDERMITE, 21);
        entityIDs.put(EntityType.EVOCATION_FANG, 22);
        entityIDs.put(EntityType.EVOCATIONILLAGER, 23);
        entityIDs.put(EntityType.EYE_IF_ENDER_SIGNAL, 25);
        entityIDs.put(EntityType.FALLING_SAND, 26);
        entityIDs.put(EntityType.FIREWORK_ROCKET, 27);
        entityIDs.put(EntityType.FOX, 28);
        entityIDs.put(EntityType.GHAST, 29);
        entityIDs.put(EntityType.GIANT, 30);
        entityIDs.put(EntityType.GUARDIAN, 31);
        entityIDs.put(EntityType.HOGLIN, 32);
        entityIDs.put(EntityType.HORSE, 33);
        entityIDs.put(EntityType.HUSK, 34);
        entityIDs.put(EntityType.ILLUSION_ILLAGER, 35);
        entityIDs.put(EntityType.IRON_GOLEM, 36);
        entityIDs.put(EntityType.ITEM, 37);
        entityIDs.put(EntityType.ITEM_FRAME, 38);
        entityIDs.put(EntityType.FIREBALL, 39);
        entityIDs.put(EntityType.LEASH_KNOT, 40);
        entityIDs.put(EntityType.LIGHTNING_BOLT, 41);
        entityIDs.put(EntityType.LLAMA, 42);
        entityIDs.put(EntityType.LLAMA_SPIT, 43);
        entityIDs.put(EntityType.MAGMA_CUBE, 44);
        entityIDs.put(EntityType.MINECART, 45);
        entityIDs.put(EntityType.MINECART_CHEST, 46);
        entityIDs.put(EntityType.MINECART_COMMANDBLOCK, 47);
        entityIDs.put(EntityType.MINECART_FURNACE, 48);
        entityIDs.put(EntityType.MINECART_HOPPER, 49);
        entityIDs.put(EntityType.MINECART_SPAWNER, 50);
        entityIDs.put(EntityType.MINECART_TNT, 51);
        entityIDs.put(EntityType.MULE, 52);
        entityIDs.put(EntityType.MUSHROOM_COW, 53);
        entityIDs.put(EntityType.OZELOT, 54);
        entityIDs.put(EntityType.PAINTING, 55);
        entityIDs.put(EntityType.PANDA, 56);
        entityIDs.put(EntityType.PARROT, 57);
        entityIDs.put(EntityType.PHANTOM, 58);
        entityIDs.put(EntityType.PIG, 59);
        entityIDs.put(EntityType.PIGLIN, 60);
        entityIDs.put(EntityType.PIGLIN_BRUTE, 51);
        entityIDs.put(EntityType.PILLAGER, 62);
        entityIDs.put(EntityType.POLAR_BEAR, 63);
        entityIDs.put(EntityType.PRIMED_TNT, 64);
        entityIDs.put(EntityType.PUFFERFISH, 65);
        entityIDs.put(EntityType.RABBIT, 66);
        entityIDs.put(EntityType.RAVAGER, 67);
        entityIDs.put(EntityType.SALMON, 68);
        entityIDs.put(EntityType.SHEEP, 69);
        entityIDs.put(EntityType.SHULKER, 70);
        entityIDs.put(EntityType.SHULKER_BULLET, 71);
        entityIDs.put(EntityType.SILVERFISH, 72);
        entityIDs.put(EntityType.SKELETON, 73);
        entityIDs.put(EntityType.SKELETON_HORSE, 74);
        entityIDs.put(EntityType.SLIME, 75);
        entityIDs.put(EntityType.SMALL_FIREBALL, 76);
        entityIDs.put(EntityType.SNOWMAN, 77);
        entityIDs.put(EntityType.SNOWBALL, 78);
        entityIDs.put(EntityType.SPECTRAL_ARROW, 79);
        entityIDs.put(EntityType.SPIDER, 80);
        entityIDs.put(EntityType.SQUID, 81);
        entityIDs.put(EntityType.STRAY, 82);
        entityIDs.put(EntityType.STRIDER, 83);
        entityIDs.put(EntityType.THROWN_EGG, 84);
        entityIDs.put(EntityType.THROWN_ENDERPEARL, 85);
        entityIDs.put(EntityType.THROWN_EXP_BOTTLE, 86);
        entityIDs.put(EntityType.THROWN_POTION, 87);
        entityIDs.put(EntityType.THROWN_TRIDENT, 88);
        entityIDs.put(EntityType.TRADER_LLAMA, 89);
        entityIDs.put(EntityType.TROPICAL_FISH, 90);
        entityIDs.put(EntityType.TURTLE, 91);
        entityIDs.put(EntityType.VEX, 92);
        entityIDs.put(EntityType.VILLAGER, 93);
        entityIDs.put(EntityType.VINDICATER, 94);
        entityIDs.put(EntityType.WANDERING_TRADER, 95);
        entityIDs.put(EntityType.WITCH, 96);
        entityIDs.put(EntityType.WITHER_BOSS, 97);
        entityIDs.put(EntityType.WITHER_SKELETON, 98);
        entityIDs.put(EntityType.WITHER_SKULL, 99);
        entityIDs.put(EntityType.WOLF, 100);
        entityIDs.put(EntityType.ZOGLIN, 101);
        entityIDs.put(EntityType.ZOMBIE, 102);
        entityIDs.put(EntityType.ZOMBIE_HORSE, 103);
        entityIDs.put(EntityType.ZOMBIE_VILLAGER, 104);
        entityIDs.put(EntityType.ZOMBIE_PIGMAN, 105);
        entityIDs.put(EntityType.PLAYER, 106);
        entityIDs.put(EntityType.FISHING_BOBBER, 107);

        registerBlockData(Material.AIR);
        registerBlockData(Material.STONE);
        registerBlockData(Material.GRANITE);
        registerBlockData(Material.POLISHED_GRANITE);
        registerBlockData(Material.DIORITE);
        registerBlockData(Material.POLISHED_DIORITE);
        registerBlockData(Material.ANDESITE);
        registerBlockData(Material.POLISHED_ANDESITE);
        registerBlockData(Material.GRASS_BLOCK, BlockDataTag.GRASS);
        registerBlockData(Material.DIRT);
        registerBlockData(Material.COARSE_DIRT);
        registerBlockData(Material.PODZOL,BlockDataTag.GRASS);
        registerBlockData(Material.COBBLESTONE);
        registerBlockData(Material.OAK_PLANKS);
        registerBlockData(Material.SPRUCE_PLANKS);
        registerBlockData(Material.BIRCH_PLANKS);
        registerBlockData(Material.JUNGLE_PLANKS);
        registerBlockData(Material.ACACIA_PLANKS);
        registerBlockData(Material.DARK_OAK_PLANKS);
        registerBlockData(Material.OAK_SAPLING,BlockDataTag.SAPLING);
        registerBlockData(Material.SPRUCE_SAPLING,BlockDataTag.SAPLING);
        registerBlockData(Material.BIRCH_SAPLING,BlockDataTag.SAPLING);
        registerBlockData(Material.JUNGLE_SAPLING,BlockDataTag.SAPLING);
        registerBlockData(Material.ACACIA_SAPLING,BlockDataTag.SAPLING);
        registerBlockData(Material.DARK_OAK_SAPLING,BlockDataTag.SAPLING);
        registerBlockData(Material.BEDROCK);
        registerBlockData(Material.WATER,BlockDataTag.WATER_LEVEL, BlockDataTag.WATER_FALLING);
        registerBlockData(Material.LAVA,BlockDataTag.WATER_LEVEL,BlockDataTag.WATER_FALLING);
        registerBlockData(Material.SAND);
        registerBlockData(Material.RED_SAND);
        registerBlockData(Material.GRAVEL);
        registerBlockData(Material.GOLD_ORE);
        registerBlockData(Material.IRON_ORE);
        registerBlockData(Material.COAL_ORE);
        registerBlockData(Material.NETHER_GOLD_ORE);
        registerBlockData(Material.OAK_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.SPRUCE_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.BIRCH_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.JUNGLE_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.ACACIA_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.DARK_OAK_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_SPRUCE_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_BIRCH_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_JUNGLE_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_ACACIA_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_DARK_OAK_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_OAK_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.OAK_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.SPRUCE_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.BIRCH_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.JUNGLE_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.ACACIA_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.DARK_OAK_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_OAK_LOG,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_SPRUCE_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_BIRCH_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_JUNGLE_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_ACACIA_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.STRIPPED_DARK_OAK_WOOD,BlockDataTag.DIRECTIONAL);
        registerBlockData(Material.OAK_LEAVES,BlockDataTag.PERSISTANT,BlockDataTag.LEAVES_LEVEL);
        registerBlockData(Material.SPRUCE_LEAVES,BlockDataTag.PERSISTANT,BlockDataTag.LEAVES_LEVEL);
        registerBlockData(Material.BIRCH_LEAVES,BlockDataTag.PERSISTANT,BlockDataTag.LEAVES_LEVEL);
        registerBlockData(Material.JUNGLE_LEAVES,BlockDataTag.PERSISTANT,BlockDataTag.LEAVES_LEVEL);
        registerBlockData(Material.ACACIA_LEAVES,BlockDataTag.PERSISTANT,BlockDataTag.LEAVES_LEVEL);
        registerBlockData(Material.DARK_OAK_LEAVES,BlockDataTag.PERSISTANT,BlockDataTag.LEAVES_LEVEL);
        registerBlockData(Material.SPONGE);
        registerBlockData(Material.WET_SPONGE);
        registerBlockData(Material.GLASS);
        registerBlockData(Material.LAPIS_ORE);
        registerBlockData(Material.LAPIS_BLOCK);
        registerBlockData(Material.DISPENSER,BlockDataTag.DIRECTION,BlockDataTag.TRIGGERED);
        registerBlockData(Material.NOTE_BLOCK,BlockDataTag.POWERED,BlockDataTag.NOTEBLOCK_TONE,BlockDataTag.NOTEBLOCK_TYPE);
        registerBlockData(Material.WHITE_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.ORANGE_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.MAGENTA_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.LIGHT_BLUE_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.YELLOW_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.LIME_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.PINK_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.GRAY_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.LIGHT_GRAY_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.CYAN_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.PURPLE_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.BLUE_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.BROWN_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.GREEN_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.RED_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.BLACK_BED,BlockDataTag.BED_HEADFOOT, BlockDataTag.BED_OCCUPIED,BlockDataTag.BED_FACING);
        registerBlockData(Material.POWERED_RAIL,BlockDataTag.POWERED_RAIL_FACING, BlockDataTag.POWERED);
        registerBlockData(Material.DETECTOR_RAIL,BlockDataTag.POWERED_RAIL_FACING, BlockDataTag.POWERED);
        registerBlockData(Material.STICKY_PISTON,BlockDataTag.DIRECTION,BlockDataTag.PISTON_EXTENDED);
        registerBlockData(Material.COBWEB);
        registerBlockData(Material.GRASS);
        registerBlockData(Material.FERN);
        registerBlockData(Material.DEAD_BUSH);
        registerBlockData(Material.SEAGRASS);
        registerBlockData(Material.TALL_GRASS,BlockDataTag.TWO_TALL);
        registerBlockData(Material.PISTON,BlockDataTag.DIRECTION,BlockDataTag.PISTON_EXTENDED);
        registerBlockData(Material.PISTON_HEAD,BlockDataTag.PISTON_HEAD_STICKY,BlockDataTag.DIRECTION);
        registerBlockData(Material.WHITE_WOOL);
        registerBlockData(Material.ORANGE_WOOL);
        registerBlockData(Material.MAGENTA_WOOL);
        registerBlockData(Material.LIGHT_BLUE_WOOL);
        registerBlockData(Material.YELLOW_WOOL);
        registerBlockData(Material.LIME_WOOL);
        registerBlockData(Material.PINK_WOOL);
        registerBlockData(Material.GRAY_WOOL);
        registerBlockData(Material.LIGHT_GRAY_WOOL);
        registerBlockData(Material.CYAN_WOOL);
        registerBlockData(Material.PURPLE_WOOL);
        registerBlockData(Material.BLUE_WOOL);
        registerBlockData(Material.BROWN_WOOL);
        registerBlockData(Material.GREEN_WOOL);
        registerBlockData(Material.RED_WOOL);
        registerBlockData(Material.BLACK_WOOL);
        registerBlockData(Material.AIR);
        registerBlockData(Material.AIR);
        registerBlockData(Material.AIR);
        registerBlockData(Material.AIR);
        registerBlockData(Material.AIR);
        registerBlockData(Material.AIR);
        registerBlockData(Material.AIR);
        registerBlockData(Material.AIR);
        registerBlockData(Material.DANDELION);
        registerBlockData(Material.POPPY);
        registerBlockData(Material.BLUE_ORCHID);
        registerBlockData(Material.ALLIUM);
        registerBlockData(Material.AZURE_BLUET);
        registerBlockData(Material.RED_TULIP);
        registerBlockData(Material.ORANGE_TULIP);
        registerBlockData(Material.WHITE_TULIP);
        registerBlockData(Material.PINK_TULIP);
        registerBlockData(Material.OXEYE_DAISY);
        registerBlockData(Material.CORNFLOWER);
        registerBlockData(Material.WITHER_ROSE);
        registerBlockData(Material.LILY_OF_THE_VALLEY);
        registerBlockData(Material.BROWN_MUSHROOM);
        registerBlockData(Material.RED_MUSHROOM);
        registerBlockData(Material.GOLD_BLOCK);
        registerBlockData(Material.IRON_BLOCK);
        registerBlockData(Material.BRICKS);
        registerBlockData(Material.TNT,BlockDataTag.TNT_UNSTABLE);
        registerBlockData(Material.BOOKSHELF);
        registerBlockData(Material.MOSSY_COBBLESTONE);
        registerBlockData(Material.OBSIDIAN);
        registerBlockData(Material.TORCH);
        registerBlockData(Material.WALL_TORCH,BlockDataTag.WALL_TORCH);

    }

}
